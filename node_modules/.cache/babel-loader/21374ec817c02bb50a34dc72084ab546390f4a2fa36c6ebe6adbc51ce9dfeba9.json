{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\Universidad\\\\7mo Semestre\\\\Redes Inalambricas\\\\project\\\\src\\\\components\\\\SpectrumGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SpectrumGraph = ({\n  signals,\n  noiseData\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  const [dimensions, setDimensions] = useState({\n    width: 800,\n    height: 400\n  });\n  const [hoverPoint, setHoverPoint] = useState(null);\n  useEffect(() => {\n    const handleResize = () => {\n      var _svgRef$current;\n      if ((_svgRef$current = svgRef.current) !== null && _svgRef$current !== void 0 && _svgRef$current.parentElement) {\n        setDimensions({\n          width: svgRef.current.parentElement.clientWidth,\n          height: 400\n        });\n      }\n    };\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  const calculateSignalPoints = signal => {\n    const points = [];\n    const startFreq = signal.fc - signal.bw / 2;\n    const endFreq = signal.fc + signal.bw / 2;\n\n    // Generar puntos para la curva de la señal (forma de campana)\n    for (let i = 0; i <= 100; i++) {\n      const freq = startFreq + i / 100 * (endFreq - startFreq);\n      const x = (freq - startFreq) / (endFreq - startFreq) * dimensions.width;\n\n      // Curva gaussiana simple\n      const center = dimensions.width / 2;\n      const y = dimensions.height - 50 - signal.power * 3 * Math.exp(-Math.pow((x - center) / (dimensions.width / 4), 2));\n      points.push(`${x},${y}`);\n    }\n    return points.join(' ');\n  };\n  const renderSignals = () => {\n    return signals.map((signal, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"signal-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"path\", {\n        d: `M${calculateSignalPoints(signal)}`,\n        fill: \"none\",\n        stroke: `hsl(${index * 120}, 80%, 50%)`,\n        strokeWidth: \"2\",\n        strokeOpacity: \"0.8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: dimensions.width * 0.5,\n        y: 20,\n        textAnchor: \"middle\",\n        fill: `hsl(${index * 120}, 80%, 50%)`,\n        fontWeight: \"bold\",\n        children: signal.name || `Señal ${index + 1}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, `signal-${index}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this));\n  };\n  const renderNoiseFloor = () => {\n    if (!noiseData) return null;\n    const noiseLevel = dimensions.height - 50 - noiseData.totalNoise * 3;\n    const points = [];\n\n    // Crear línea de ruido con variación aleatoria\n    for (let i = 0; i <= 100; i++) {\n      const x = i / 100 * dimensions.width;\n      const y = noiseLevel + (Math.random() * 10 - 5);\n      points.push(`${x},${y}`);\n    }\n    return /*#__PURE__*/_jsxDEV(\"path\", {\n      d: `M${points.join(' ')}`,\n      fill: \"none\",\n      stroke: \"#666\",\n      strokeWidth: \"1.5\",\n      strokeOpacity: \"0.7\",\n      strokeDasharray: \"2,2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  };\n  const renderAxes = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"0\",\n        y1: dimensions.height - 50,\n        x2: dimensions.width,\n        y2: dimensions.height - 50,\n        stroke: \"#333\",\n        strokeWidth: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"50\",\n        y1: \"0\",\n        x2: \"50\",\n        y2: dimensions.height - 50,\n        stroke: \"#333\",\n        strokeWidth: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  const handleMouseMove = e => {\n    if (!svgRef.current) return;\n    const rect = svgRef.current.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Calcular frecuencia aproximada basada en posición X\n    setHoverPoint({\n      x,\n      y,\n      freq: Math.round(x / dimensions.width * 2000) // Ejemplo: rango 0-2000 Hz\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-lg shadow-xl p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-4 text-gray-800\",\n      children: \"Visualizaci\\xF3n del Espectro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full h-80 bg-gradient-to-b from-gray-50 to-white rounded overflow-hidden\",\n      onMouseMove: handleMouseMove,\n      onMouseLeave: () => setHoverPoint(null),\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: dimensions.width,\n        height: dimensions.height,\n        viewBox: `0 0 ${dimensions.width} ${dimensions.height}`,\n        preserveAspectRatio: \"none\",\n        className: \"w-full h-full\",\n        children: [renderAxes(), renderNoiseFloor(), renderSignals(), hoverPoint && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"line\", {\n            x1: hoverPoint.x,\n            y1: \"0\",\n            x2: hoverPoint.x,\n            y2: dimensions.height - 50,\n            stroke: \"#666\",\n            strokeWidth: \"1\",\n            strokeDasharray: \"4,2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: hoverPoint.x,\n            cy: hoverPoint.y,\n            r: \"4\",\n            fill: \"#ff4757\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: hoverPoint.x + 10,\n            y: 20,\n            fill: \"#333\",\n            fontWeight: \"bold\",\n            children: [hoverPoint.freq, \" Hz\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(SpectrumGraph, \"vzDkEmQeKDJ+NcyXG8f2EJX8ea8=\");\n_c = SpectrumGraph;\nexport default SpectrumGraph;\n\n// DONE\nvar _c;\n$RefreshReg$(_c, \"SpectrumGraph\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","SpectrumGraph","signals","noiseData","_s","svgRef","dimensions","setDimensions","width","height","hoverPoint","setHoverPoint","handleResize","_svgRef$current","current","parentElement","clientWidth","window","addEventListener","removeEventListener","calculateSignalPoints","signal","points","startFreq","fc","bw","endFreq","i","freq","x","center","y","power","Math","exp","pow","push","join","renderSignals","map","index","className","children","d","fill","stroke","strokeWidth","strokeOpacity","fileName","_jsxFileName","lineNumber","columnNumber","textAnchor","fontWeight","name","renderNoiseFloor","noiseLevel","totalNoise","random","strokeDasharray","renderAxes","x1","y1","x2","y2","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","round","onMouseMove","onMouseLeave","ref","viewBox","preserveAspectRatio","cx","cy","r","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Desktop/Universidad/7mo Semestre/Redes Inalambricas/project/src/components/SpectrumGraph.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\nconst SpectrumGraph = ({ signals, noiseData }) => {\n  const svgRef = useRef(null);\n  const [dimensions, setDimensions] = useState({ width: 800, height: 400 });\n  const [hoverPoint, setHoverPoint] = useState(null);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (svgRef.current?.parentElement) {\n        setDimensions({\n          width: svgRef.current.parentElement.clientWidth,\n          height: 400\n        });\n      }\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const calculateSignalPoints = (signal) => {\n    const points = [];\n    const startFreq = signal.fc - signal.bw/2;\n    const endFreq = signal.fc + signal.bw/2;\n    \n    // Generar puntos para la curva de la señal (forma de campana)\n    for (let i = 0; i <= 100; i++) {\n      const freq = startFreq + (i/100) * (endFreq - startFreq);\n      const x = ((freq - startFreq) / (endFreq - startFreq)) * dimensions.width;\n      \n      // Curva gaussiana simple\n      const center = dimensions.width / 2;\n      const y = dimensions.height - 50 - (signal.power * 3) * Math.exp(-Math.pow((x - center)/(dimensions.width/4), 2));\n      \n      points.push(`${x},${y}`);\n    }\n    \n    return points.join(' ');\n  };\n\n  const renderSignals = () => {\n    return signals.map((signal, index) => (\n      <g key={`signal-${index}`} className=\"signal-group\">\n        <path\n          d={`M${calculateSignalPoints(signal)}`}\n          fill=\"none\"\n          stroke={`hsl(${index * 120}, 80%, 50%)`}\n          strokeWidth=\"2\"\n          strokeOpacity=\"0.8\"\n        />\n        <text \n          x={dimensions.width * 0.5} \n          y={20} \n          textAnchor=\"middle\"\n          fill={`hsl(${index * 120}, 80%, 50%)`}\n          fontWeight=\"bold\"\n        >\n          {signal.name || `Señal ${index + 1}`}\n        </text>\n      </g>\n    ));\n  };\n\n  const renderNoiseFloor = () => {\n    if (!noiseData) return null;\n    \n    const noiseLevel = dimensions.height - 50 - (noiseData.totalNoise * 3);\n    const points = [];\n    \n    // Crear línea de ruido con variación aleatoria\n    for (let i = 0; i <= 100; i++) {\n      const x = (i/100) * dimensions.width;\n      const y = noiseLevel + (Math.random() * 10 - 5);\n      points.push(`${x},${y}`);\n    }\n    \n    return (\n      <path\n        d={`M${points.join(' ')}`}\n        fill=\"none\"\n        stroke=\"#666\"\n        strokeWidth=\"1.5\"\n        strokeOpacity=\"0.7\"\n        strokeDasharray=\"2,2\"\n      />\n    );\n  };\n\n  const renderAxes = () => {\n    return (\n      <>\n        <line\n          x1=\"0\"\n          y1={dimensions.height - 50}\n          x2={dimensions.width}\n          y2={dimensions.height - 50}\n          stroke=\"#333\"\n          strokeWidth=\"1\"\n        />\n        <line\n          x1=\"50\"\n          y1=\"0\"\n          x2=\"50\"\n          y2={dimensions.height - 50}\n          stroke=\"#333\"\n          strokeWidth=\"1\"\n        />\n      </>\n    );\n  };\n\n  const handleMouseMove = (e) => {\n    if (!svgRef.current) return;\n    \n    const rect = svgRef.current.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    // Calcular frecuencia aproximada basada en posición X\n    setHoverPoint({\n      x,\n      y,\n      freq: Math.round((x / dimensions.width) * 2000) // Ejemplo: rango 0-2000 Hz\n    });\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-xl p-4\">\n      <h2 className=\"text-xl font-semibold mb-4 text-gray-800\">Visualización del Espectro</h2>\n      <div \n        className=\"relative w-full h-80 bg-gradient-to-b from-gray-50 to-white rounded overflow-hidden\"\n        onMouseMove={handleMouseMove}\n        onMouseLeave={() => setHoverPoint(null)}\n      >\n        <svg\n          ref={svgRef}\n          width={dimensions.width}\n          height={dimensions.height}\n          viewBox={`0 0 ${dimensions.width} ${dimensions.height}`}\n          preserveAspectRatio=\"none\"\n          className=\"w-full h-full\"\n        >\n          {renderAxes()}\n          {renderNoiseFloor()}\n          {renderSignals()}\n          \n          {hoverPoint && (\n            <>\n              <line\n                x1={hoverPoint.x}\n                y1=\"0\"\n                x2={hoverPoint.x}\n                y2={dimensions.height - 50}\n                stroke=\"#666\"\n                strokeWidth=\"1\"\n                strokeDasharray=\"4,2\"\n              />\n              <circle\n                cx={hoverPoint.x}\n                cy={hoverPoint.y}\n                r=\"4\"\n                fill=\"#ff4757\"\n              />\n              <text\n                x={hoverPoint.x + 10}\n                y={20}\n                fill=\"#333\"\n                fontWeight=\"bold\"\n              >\n                {hoverPoint.freq} Hz\n              </text>\n            </>\n          )}\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default SpectrumGraph;\n\n// DONE"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}