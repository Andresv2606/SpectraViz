{"ast":null,"code":"import React,{useState}from'react';import SpectrumHeader from'./components/SpectrumHeader';import SignalInputForm from'./components/SignalInputForm';import NoiseSettings from'./components/NoiseSettings';import SpectrumGraph from'./components/SpectrumGraph';import MeasurementsPanel from'./components/MeasurementsPanel';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[signals,setSignals]=useState([]);const[noiseData,setNoiseData]=useState(null);const[measurements,setMeasurements]=useState([]);const handleAddSignal=signal=>{setSignals([...signals,signal]);// Actualizar mediciones cuando se agrega una nueva señal\nupdateMeasurements([...signals,signal],noiseData);};const handleNoiseCalculate=noise=>{// Calcular el ruido térmico (kTB)\nconst k=1.380649e-23;// Constante de Boltzmann\nconst bwHz=noise.bw*1e6;// Convertir MHz a Hz\nconst thermalNoise=10*Math.log10(k*noise.temperature*bwHz)+30;// Considerar el ruido del sistema si está presente\nconst totalNoise=typeof noise.systemNoise==='number'?10*Math.log10(Math.pow(10,thermalNoise/10)+Math.pow(10,noise.systemNoise/10)):thermalNoise;// Actualizar el estado del ruido\nsetNoiseData({thermalNoise,systemNoise:noise.systemNoise,totalNoise,bw:noise.bw});// Actualizar mediciones con el nuevo cálculo de ruido\nupdateMeasurements(signals,{thermalNoise,systemNoise:noise.systemNoise,totalNoise,bw:noise.bw});};const updateMeasurements=(currentSignals,currentNoise)=>{if(!currentNoise||currentSignals.length===0)return;const newMeasurements=[];// Agregar información de ruido\nnewMeasurements.push({label:'Ruido Térmico',value:\"\".concat(currentNoise.thermalNoise.toFixed(2),\" dBm\")});// Agregar ruido del sistema si está presente\nif(currentNoise.systemNoise){newMeasurements.push({label:'Ruido del Sistema',value:\"\".concat(currentNoise.systemNoise.toFixed(2),\" dBm\")});}// Agregar ruido total\nnewMeasurements.push({label:'Ruido Total',value:\"\".concat(currentNoise.totalNoise.toFixed(2),\" dBm\")});// Calcular SNR para cada señal\ncurrentSignals.forEach((signal,index)=>{const snr=signal.power-currentNoise.totalNoise;newMeasurements.push({label:\"SNR Se\\xF1al \".concat(index+1,\" (\").concat(signal.name||'Sin nombre',\")\"),value:\"\".concat(snr.toFixed(2),\" dB\")});});setMeasurements(newMeasurements);};return/*#__PURE__*/_jsxs(\"div\",{className:\"min-h-screen bg-gray-50\",children:[/*#__PURE__*/_jsx(SpectrumHeader,{}),/*#__PURE__*/_jsx(\"div\",{className:\"container mx-auto p-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-3 gap-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"lg:col-span-1 space-y-4\",children:[/*#__PURE__*/_jsx(SignalInputForm,{onAddSignal:handleAddSignal}),/*#__PURE__*/_jsx(NoiseSettings,{onNoiseCalculate:handleNoiseCalculate}),/*#__PURE__*/_jsx(MeasurementsPanel,{measurements:measurements})]}),/*#__PURE__*/_jsx(\"div\",{className:\"lg:col-span-2\",children:/*#__PURE__*/_jsx(SpectrumGraph,{signals:signals,noiseData:noiseData})})]})})]});}export default App;// DONE","map":{"version":3,"names":["React","useState","SpectrumHeader","SignalInputForm","NoiseSettings","SpectrumGraph","MeasurementsPanel","jsx","_jsx","jsxs","_jsxs","App","signals","setSignals","noiseData","setNoiseData","measurements","setMeasurements","handleAddSignal","signal","updateMeasurements","handleNoiseCalculate","noise","k","bwHz","bw","thermalNoise","Math","log10","temperature","totalNoise","systemNoise","pow","currentSignals","currentNoise","length","newMeasurements","push","label","value","concat","toFixed","forEach","index","snr","power","name","className","children","onAddSignal","onNoiseCalculate"],"sources":["C:/ReactProjects/project/SpectraViz/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport SpectrumHeader from './components/SpectrumHeader';\r\nimport SignalInputForm from './components/SignalInputForm';\r\nimport NoiseSettings from './components/NoiseSettings';\r\nimport SpectrumGraph from './components/SpectrumGraph';\r\nimport MeasurementsPanel from './components/MeasurementsPanel';\r\n\r\nfunction App() {\r\n  const [signals, setSignals] = useState([]);\r\n  const [noiseData, setNoiseData] = useState(null);\r\n  const [measurements, setMeasurements] = useState([]);\r\n\r\n  const handleAddSignal = (signal) => {\r\n    setSignals([...signals, signal]);\r\n    // Actualizar mediciones cuando se agrega una nueva señal\r\n    updateMeasurements([...signals, signal], noiseData);\r\n  };\r\n\r\n  const handleNoiseCalculate = (noise) => {\r\n    // Calcular el ruido térmico (kTB)\r\n    const k = 1.380649e-23; // Constante de Boltzmann\r\n    const bwHz = noise.bw * 1e6; // Convertir MHz a Hz\r\n    const thermalNoise = 10 * Math.log10(k * noise.temperature * bwHz) + 30;\r\n    \r\n    // Considerar el ruido del sistema si está presente\r\n    const totalNoise = \r\n      typeof noise.systemNoise === 'number'\r\n        ? 10 * Math.log10(Math.pow(10, thermalNoise / 10) + Math.pow(10, noise.systemNoise / 10))\r\n        : thermalNoise;\r\n\r\n \r\n    // Actualizar el estado del ruido\r\n    setNoiseData({\r\n      thermalNoise,\r\n      systemNoise: noise.systemNoise,\r\n      totalNoise,\r\n      bw: noise.bw\r\n    });\r\n    \r\n    // Actualizar mediciones con el nuevo cálculo de ruido\r\n    updateMeasurements(signals, {\r\n      thermalNoise,\r\n      systemNoise: noise.systemNoise,\r\n      totalNoise,\r\n      bw: noise.bw\r\n    });\r\n  };\r\n\r\n  const updateMeasurements = (currentSignals, currentNoise) => {\r\n    if (!currentNoise || currentSignals.length === 0) return;\r\n\r\n    const newMeasurements = [];\r\n    \r\n    // Agregar información de ruido\r\n    newMeasurements.push({\r\n      label: 'Ruido Térmico',\r\n      value: `${currentNoise.thermalNoise.toFixed(2)} dBm`\r\n    });\r\n \r\n    // Agregar ruido del sistema si está presente\r\n    if (currentNoise.systemNoise) {\r\n      newMeasurements.push({\r\n        label: 'Ruido del Sistema',\r\n        value: `${currentNoise.systemNoise.toFixed(2)} dBm`\r\n      });\r\n    }\r\n\r\n    // Agregar ruido total\r\n    newMeasurements.push({\r\n      label: 'Ruido Total',\r\n      value: `${currentNoise.totalNoise.toFixed(2)} dBm`\r\n    });\r\n\r\n    // Calcular SNR para cada señal\r\n    currentSignals.forEach((signal, index) => {\r\n      const snr = signal.power - currentNoise.totalNoise;\r\n      newMeasurements.push({\r\n        label: `SNR Señal ${index + 1} (${signal.name || 'Sin nombre'})`,\r\n        value: `${snr.toFixed(2)} dB`\r\n      });\r\n    });\r\n\r\n    setMeasurements(newMeasurements);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <SpectrumHeader />\r\n      <div className=\"container mx-auto p-4\">\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\r\n          <div className=\"lg:col-span-1 space-y-4\">\r\n            <SignalInputForm onAddSignal={handleAddSignal} />\r\n            <NoiseSettings onNoiseCalculate={handleNoiseCalculate} />\r\n            <MeasurementsPanel measurements={measurements} />\r\n          </div>\r\n          <div className=\"lg:col-span-2\">\r\n            <SpectrumGraph signals={signals} noiseData={noiseData} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// DONE"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}